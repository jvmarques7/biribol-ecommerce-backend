// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String            @id @default(uuid()) @db.Uuid
  nome      String
  email     String            @unique
  senha     String
  perfis    UsuarioPerfil[] // relacionamento com roles
  dataCriacao DateTime       @default(now()) @map("data_criacao")
  pessoaId String? @db.Uuid @map("pessoa_fisica_id") @unique
  pessoa Pessoa? @relation(fields: [pessoaId], references: [id])
  pedido    Pedido[]

  @@map("usuario")
}

model Perfil {
  id    BigInt     @id 
  nome  TipoPerfil   
  usuarios UsuarioPerfil[] // usuários com esse perfil

  @@map("perfil")
}

model UsuarioPerfil {
  id     String @id   @default(uuid()) @db.Uuid
  usuario   Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId String   @db.Uuid @map("usuario_id")
  perfil   Perfil     @relation(fields: [perfilId], references: [id])
  perfilId BigInt    @map("perfil_id")

  @@unique([usuarioId, perfilId])
  @@map("usuario_perfil")
}

model Produto {
  id         String           @id @default(uuid()) @db.Uuid
  nome       String
  descricao  String
  preco      Float
  imagemUrl  String           @map("imagem_url")
  estoque    Int
  dataCriacao  DateTime       @default(now()) @map("data_criacao")
  dataAlteracao  DateTime     @updatedAt @map("data_alteracao")
  produtoPedido ProdutoPedido[]

  @@map("produto")
}

model Pedido {
  id        String          @id @default(uuid()) @db.Uuid
  usuario   Usuario         @relation(fields: [usuarioId], references: [id])
  usuarioId String         @db.Uuid @map("usuario_id")
  total     Float
  dataCriacao  DateTime    @default(now()) @map("data_criacao")
  produtos     ProdutoPedido[]

  @@map("pedido")
}

model ProdutoPedido {
  id         String  @id @default(uuid()) @db.Uuid
  produto    Produto @relation(fields: [produtoId], references: [id])
  produtoId  String @db.Uuid @map("produto_id")
  pedido     Pedido  @relation(fields: [pedidoId], references: [id])
  pedidoId   String @db.Uuid @map("pedido_id")
  quantidade Int

  @@map("produto_pedido")
}

model Estado {
  id     BigInt   @id
  nome   String
  sigla  String   @unique
  cidades Cidade[]

  @@map("estado")
}

model Cidade {
  id        BigInt   @id
  nome      String
  estadoId  BigInt   @map("estado_id")
  estado    Estado   @relation(fields: [estadoId], references: [id])

  @@map("cidade")
}

model Endereco {
  id            String   @id @default(uuid()) @db.Uuid
  pessoaId     String   @db.Uuid @map("pessoa_id")
  pessoa       Pessoa?  @relation(fields: [pessoaId], references: [id])

  estado        String
  cidade        String
  rua           String
  numero        String?
  complemento   String?
  bairro        String
  cep           String

  nomeDestinatario String   @db.VarChar(100) @map("nome_destinatario") /// Nome do destinatário
  tipoEndereco     String   @db.VarChar(20)  @map("tipo_endereco") /// 'Residencial' ou 'Trabalho'
  info              String?  @db.VarChar(255)  /// Informações adicionais
  
  dataCriacao   DateTime @default(now()) @map("data_criacao")
  padrao       Boolean  @default(false) /// Indica se é o endereço principal

  @@map("endereco")
}

model Pessoa {
  id              String   @id @default(uuid()) @db.Uuid
  nome            String
  cpf             String?  @unique
  dataNascimento  DateTime? @map("data_nascimento")
  cnpj      String? @unique
  razaoSocial      String? @map("razao_social")
  pessoaJuridica     Boolean @default(false) @map("pessoa_juridica")
  usuario         Usuario?
  enderecos       Endereco[]
  contatos        ContatoPessoa[]

  @@map("pessoa")
}

model TipoContato {
  id       BigInt          @id
  nome     String          @unique
  contatos ContatoPessoa[]

  @@map("tipo_contato")
}

model ContatoPessoa {
  id             String       @id @default(uuid()) @db.Uuid
  pessoaId      String       @db.Uuid @map("pessoa_id")
  pessoa        Pessoa      @relation(fields: [pessoaId], references: [id])
  tipoContatoId  BigInt       @map("tipo_contato_id")
  tipoContato    TipoContato  @relation(fields: [tipoContatoId], references: [id])
  valor          String

  @@map("contato_pessoa")
}


enum TipoPerfil {
  CLIENTE
  ADMIN
  DEV
}
